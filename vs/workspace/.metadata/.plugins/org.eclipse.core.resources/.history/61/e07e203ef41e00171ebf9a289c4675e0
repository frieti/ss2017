package de.sbuettner.vs;

// 05.04.16

/**
 *
 * @author Peter Altenberd (Translated into English by Ronald Moore)
 *         Computer Science Dept. Fachbereich Informatik Darmstadt Univ. of
 *         Applied Sciences Hochschule Darmstadt
 */

import java.io.*;
import java.net.*;
import java.util.Properties;

public class Sensor implements Runnable {

	static Socket socket;
	static BufferedReader fromServer;
	static DataOutputStream toServer;
	static UserInterface user = new UserInterface();
	static Properties props = new Properties();
	static Reader reader;
	String name;
	int ml;

	public Sensor(String name, int ml) {
		this.name = name;
		this.ml = ml;
	}

	@Override public void run() {
		try {
			reader = new FileReader("vs.properties");
			props.load(reader);

					
			while (ml!=0) {
				socket = new Socket(props.getProperty("serverip", "localhost"),Integer.parseInt(props.getProperty("serverport", "9002"))); // Original war Port 9000
				toServer = new DataOutputStream(socket.getOutputStream());			// Datastream FROM Server		
				fromServer = new BufferedReader(new InputStreamReader(socket.getInputStream()));	// Datastream TO Server
				System.out.println("Sending: " + name + ":" + Integer.toString(ml));
				while (sendRequest(name + ":" + Integer.toString(ml))) {			// Send requests while connected
					//receiveResponse();												// Process server's answer
				}
				socket.close();
				toServer.close();
				fromServer.close();
				Thread.sleep(1000);
				ml-=100;
			}
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	private static boolean sendRequest(String message) throws IOException {
		boolean holdTheLine = true; // Connection exists
		toServer.writeBytes(message + '\n');
	return holdTheLine;
	}

	private void receiveResponse() throws IOException {
		user.output("Server answers: " + new String(fromServer.readLine()) + '\n');
	}
}