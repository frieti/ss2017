package de.sbuettner.vs.praktikum;

import java.util.HashMap;
import java.util.Map;

import org.eclipse.paho.client.mqttv3.IMqttDeliveryToken;
import org.eclipse.paho.client.mqttv3.MqttCallback;
import org.eclipse.paho.client.mqttv3.MqttClient;
import org.eclipse.paho.client.mqttv3.MqttException;
import org.eclipse.paho.client.mqttv3.MqttMessage;
import org.eclipse.paho.client.mqttv3.MqttSecurityException;

public class Manufacturer implements Runnable{
	
	MqttClient client;
	Map<String, Double> articles = new HashMap<String, Double>();

	@Override
	public void run() {
		try {
			client = new MqttClient("tcp://192.168.192.23", "ManufacturerID");
			client.connect();
			client.setCallback(new MqttCallback() {
				@Override
			       public void connectionLost(Throwable throwable) { }
			 
			       @Override
			       public void messageArrived(String t, MqttMessage m) throws Exception {
			    	   
			         System.out.println(new String(m.getPayload()));
			         String mes = new String(m.getPayload());
			         
			       }
			 
			       @Override
			       public void deliveryComplete(IMqttDeliveryToken t) { }
			       });
			for()
			client.subscribe("VS/Manufacturer/offer/" + article);

			
		} catch (MqttException e) {
			e.printStackTrace();
		}
	}
	private void send() throws MqttSecurityException, MqttException {
		client.connect();
		

		MqttMessage message = new MqttMessage("Test".getBytes());
		client.publish("VS/Manufacturer/Test", message);	 
		client.disconnect();
	}
}
